import streamlit as st
import sys
import os
import time
import json
import psutil
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Union, Tuple
import pandas as pd
from pathlib import Path
import threading
import queue
import asyncio
from dataclasses import dataclass, asdict
from enum import Enum
import logging
from contextlib import contextmanager
import traceback

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ===== –¢–ò–ü–ò–ó–ê–¶–ò–Ø –ò –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =====
class ModelStatus(Enum):
    IDLE = "idle"
    LOADING = "loading"
    LOADED = "loaded"
    ERROR = "error"

class TaskType(Enum):
    CODE_GENERATION = "code_generation"
    CODE_ANALYSIS = "code_analysis"
    CODE_FIXING = "code_fixing"
    CODE_EXPLANATION = "code_explanation"
    FREE_MODE = "free_mode"

@dataclass
class SystemMetrics:
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    ram_percent: float
    cpu_percent: float
    gpu_percent: Optional[float]
    disk_percent: float
    timestamp: datetime
    
@dataclass
class ModelConfiguration:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    dtype: Optional[str] = None
    quantization: Optional[Union[str, bool]] = None
    max_new_tokens: Optional[int] = None
    model_name: Optional[str] = None
    device: Optional[str] = None
    
    def is_valid(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: dtype={self.dtype}, quantization={self.quantization}, max_new_tokens={self.max_new_tokens}")
        return any([
            self.dtype is not None,
            self.quantization is not None,
            self.max_new_tokens is not None
        ])

@dataclass
class InteractionRecord:
    """–ó–∞–ø–∏—Å—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π"""
    timestamp: str
    task: str
    result: str
    task_type: str
    duration_ms: Optional[float] = None
    success: bool = True
    error_message: Optional[str] = None

# ===== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô =====
def check_gpu_availability() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        import torch
        return torch.cuda.is_available()
    except ImportError:
        logger.warning("PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

gpu_available = check_gpu_availability()

def import_assistant_modules():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    try:
        from Aida import EnhancedCodeAssistant, GenerationMetrics
        return EnhancedCodeAssistant, GenerationMetrics
    except ImportError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π AIDA: {e}")
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ AIDA. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª fixed_aida_code3.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
        st.stop()

EnhancedCodeAssistant, GenerationMetrics = import_assistant_modules()

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø STREAMLIT =====
st.set_page_config(
    page_title="ü§ñ –ê–∏–¥–∞ - AI Code Assistant",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ===== –°–¢–ò–õ–ò –ò CSS =====
CUSTOM_CSS = """
<style>
   body {
       word-wrap: break-word;
       overflow-wrap: break-word;
    }

    .main-header {
        text-align: center;
        padding: 2rem 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #007bff;
        margin: 0.5rem 0;
        color: #333 !important;
    }
    
    .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }
    
    .status-ready { background-color: #28a745; }
    .status-loading { background-color: #ffc107; animation: pulse 1s infinite; }
    .status-error { background-color: #dc3545; }
    
    @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }
    
    .progress-bar {
        background-color: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
        height: 8px;
        margin: 0.5rem 0;
    }
    
    .progress-fill {
        background-color: #007bff;
        height: 100%;
        transition: width 0.3s ease;
    }
    
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 4px;
        padding: 0.75rem;
        margin: 0.5rem 0;
        color: #856404;
    }
    
    .task-section {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }
    
    .config-section {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .error-section {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
        color: #721c24;
    }

    /* –ù–û–í–´–ï –°–¢–ò–õ–ò –î–õ–Ø –ö–û–†–†–ï–ö–¢–ù–û–ì–û –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–û–î–ê */

    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ */
    pre {
        white-space: pre-wrap !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
        overflow-x: auto !important;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è inline –∫–æ–¥–∞ */
    code {
         white-space: pre-wrap !important;
         word-wrap: break-word !important;
         overflow-wrap: break-word !important;
         max-width: 100% !important;
    }

    /* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è Streamlit code –±–ª–æ–∫–æ–≤ */
    .stCodeBlock {
        white-space: pre-wrap !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
    }

    .stCodeBlock pre {
        white-space: pre-wrap !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
        overflow-x: auto !important;
    }

    .stCodeBlock code {
        white-space: pre-wrap !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º element-container */
    .element-container pre {
        white-space: pre-wrap !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
        overflow-x: auto !important;
    }

    .element-container code {
        white-space: pre-wrap !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è markdown –∫–æ–¥–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö */
    .markdown-text-container pre {
        white-space: pre-wrap !important;
         word-wrap: break-word !important;
         overflow-wrap: break-word !important;
         max-width: 100% !important;
         overflow-x: auto !important;
         font-family: 'Courier New', Courier, monospace !important;
         background-color: #f8f9fa !important;
         border: 1px solid #e9ecef !important;
         border-radius: 4px !important;
         padding: 1rem !important;
         margin: 0.5rem 0 !important;
    }

    .markdown-text-container code {
        white-space: pre-wrap !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
        font-family: 'Courier New', Courier, monospace !important;
    }

    /* –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∫–æ–¥–∞ */
    [data-testid="stMarkdown"] pre,
    [data-testid="stCode"] pre,
    div[class*="code"] pre {
        white-space: pre-wrap !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
        overflow-x: auto !important;
    }

    [data-testid="stMarkdown"] code,
    [data-testid="stCode"] code,
    div[class*="code"] code {
        white-space: pre-wrap !important;
        word-wrap: break-word !important;
        overflow-wrap: break-word !important;
        max-width: 100% !important;
    }

    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */
    .stCodeBlock {
        font-size: 14px !important;
        line-height: 1.5 !important;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ */
    .code-container {
        max-width: 100%;
        overflow-x: auto;
    }

    /* Responsive –¥–∏–∑–∞–π–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
    @media (max-width: 768px) {
        pre, code {
            font-size: 12px !important;
            line-height: 1.4 !important;
        }

        .stCodeBlock {
            font-size: 12px !important;
        }
    }
</style>
"""

# ===== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
class EnhancedAidaWebInterface:
    """
    Production-ready –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AIDA Code Assistant
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
    - Comprehensive error handling
    - Type safety —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º dataclasses
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - Graceful degradation
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self._initialize_session_state()
        self._setup_logging()
        self._ensure_assistant_initialized()

    def _initialize_session_state(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        default_states: Dict[str, Any] = {
            'assistant': None,
            'conversation_history': [],
            'current_task': None,
            'model_loaded': False,
            'user_name': None,
            'session_metrics': [],
            'last_response': None,
            'config_path': 'config.json',
            'loading_progress': 0,
            'loading_status': ModelStatus.IDLE.value,
            'loading_error': None,
            'last_resource_check': time.time(),
            'resource_warning': None,
            'loading_queue': None,
            'last_rerun_time': 0,
            'session_start': datetime.now(),
            'chat_messages': [],
            'cached_config': None,
            'config_cache_time': 0,
            'model_config_loaded': False  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        }

        for key, value in default_states.items():
            if key not in st.session_state:
                st.session_state[key] = value
   
    def load_model(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...")
            start_time = time.time()

            success = st.session_state.assistant.load_model()
            load_time = time.time() - start_time

            # ‚úÖ –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            st.session_state.model_loaded = success
            st.session_state.loading_status = (
                ModelStatus.LOADED.value if success else ModelStatus.ERROR.value
            )

            if success:
                logger.info(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f}—Å")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                self._get_cached_model_configuration.clear()
                st.session_state.model_config_loaded = True
            else:
                st.session_state.loading_error = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"
                logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")

        except Exception as e:
            st.session_state.loading_status = ModelStatus.ERROR.value
            st.session_state.loading_error = str(e)
            st.session_state.model_config_loaded = False
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")


    def _setup_logging(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è production environment"""
        if 'logger_initialized' not in st.session_state:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AIDA Web Interface")
            st.session_state.logger_initialized = True

    def _ensure_assistant_initialized(self) -> None:
        """Thread-safe –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        if st.session_state.assistant is None:
            try:
                st.session_state.assistant = EnhancedCodeAssistant(
                    st.session_state.config_path
                )
                logger.info("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
                st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                st.stop()

    @contextmanager
    def _error_boundary(self, operation_name: str):
        """Context manager –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            yield
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation_name}: {e}")
            st.error(f"–û—à–∏–±–∫–∞ {operation_name}: {str(e)}")
            
            # Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ development —Ä–µ–∂–∏–º–µ
            if st.session_state.get('debug_mode', False):
                st.text_area("Stack trace:", traceback.format_exc(), height=200)

    def _validate_model_state(self) -> bool:
        """Comprehensive –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        return (
            st.session_state.model_loaded and
            st.session_state.loading_status == ModelStatus.LOADED.value and
            st.session_state.assistant is not None and
            hasattr(st.session_state.assistant, 'load_config')
        )

    @st.cache_data(ttl=300, show_spinner=False)
    def _get_cached_model_configuration(_self) -> Optional[Dict[str, Any]]:
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
        try:
            if not st.session_state.assistant:
                return None
                
            # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            config = st.session_state.assistant.get_display_configuration()

            if isinstance(config, dict) and config:
                logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                st.session_state.model_config_loaded = True
                return config
            else:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–ª–∏ –ø—É—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")
                return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None


    def _get_system_metrics(self) -> SystemMetrics:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            ram = psutil.virtual_memory()
            cpu_percent = psutil.cpu_percent(interval=0.1)
            disk = psutil.disk_usage('/')
            
            gpu_percent = None
            if gpu_available:
                try:
                    import torch
                    torch.cuda.empty_cache()
                    total = torch.cuda.get_device_properties(0).total_memory
                    used = torch.cuda.memory_allocated(0)
                    gpu_percent = (used / total) * 100
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GPU –º–µ—Ç—Ä–∏–∫: {e}")

            return SystemMetrics(
                ram_percent=ram.percent,
                cpu_percent=cpu_percent,
                gpu_percent=gpu_percent,
                disk_percent=disk.percent,
                timestamp=datetime.now()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º dummy –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return SystemMetrics(0, 0, None, 0, datetime.now())

    def _check_system_resources(self) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        warnings = []
        
        try:
            metrics = self._get_system_metrics()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if metrics.ram_percent > 90:
                warnings.append(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {metrics.ram_percent:.1f}%")
            elif metrics.ram_percent > 80:
                warnings.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {metrics.ram_percent:.1f}%")

            if metrics.cpu_percent > 90:
                warnings.append(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {metrics.cpu_percent:.1f}%")

            if metrics.gpu_percent and metrics.gpu_percent > 90:
                warnings.append(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ GPU: {metrics.gpu_percent:.1f}%")

            if metrics.disk_percent > 90:
                warnings.append(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {metrics.disk_percent:.1f}%")

        except Exception as e:
            warnings.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã: {str(e)}")

        return warnings

    def _start_model_loading(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        if (st.session_state.assistant is not None
            and not st.session_state.model_loaded
            and st.session_state.loading_status != ModelStatus.LOADING.value):

            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
            st.session_state.loading_progress = 0
            st.session_state.loading_error = None
            st.session_state.resource_warning = None
            st.session_state.loading_status = ModelStatus.LOADING.value
            st.session_state.model_config_loaded = False  # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            pre_check_warnings = self._check_system_resources()
            if pre_check_warnings:
                st.session_state.resource_warning = "\n".join(pre_check_warnings)

            with st.spinner("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏..."):
                self.load_model()
                try:
                    start_time = time.time()
                    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...")
                    logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏: {st.session_state.loading_status}, –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {st.session_state.model_loaded}")
                    success = st.session_state.assistant.load_model()
                    load_time = time.time() - start_time
                    
                    st.session_state.model_loaded = success
                    st.session_state.loading_status = (
                        ModelStatus.LOADED.value if success else ModelStatus.ERROR.value
                    )
                    
                    if success:
                        logger.info(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f}—Å")
                        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∞
                        self._get_cached_model_configuration.clear()
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        st.session_state.model_config_loaded = True
                    else:
                        st.session_state.loading_error = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"
                        logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")
                        
                except Exception as e:
                    st.session_state.loading_status = ModelStatus.ERROR.value
                    st.session_state.loading_error = str(e)
                    st.session_state.model_config_loaded = False
                    logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")

            st.rerun()

    def _render_model_configuration(self) -> None:
        """Production-ready —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏
        if not self._validate_model_state():
            if st.session_state.loading_status == ModelStatus.LOADING.value:
                st.info("üîÑ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            elif st.session_state.loading_status == ModelStatus.ERROR.value:
                st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                st.info("‚ÑπÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
            return

        with self._error_boundary("—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"):
            config_dict = self._get_cached_model_configuration()
            
            if not config_dict:
                st.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return

            config = ModelConfiguration(**{
                k: v for k, v in config_dict.items() 
                if k in ModelConfiguration.__annotations__
            })

            if not config.is_valid():
                st.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è")
                return

            st.markdown('<div class="config-section">', unsafe_allow_html=True)
            st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            if config.dtype:
                st.write(f"**–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:** `{config.dtype}`")
            
            if config.quantization is not None:
                quant_status = "‚úÖ " + str(config.quantization) if config.quantization else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
                st.write(f"**–ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è:** {quant_status}")
                
            if config.max_new_tokens:
                st.write(f"**–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω—ã:** {config.max_new_tokens:,}")
                
            if config.model_name:
                st.write(f"**–ú–æ–¥–µ–ª—å:** {config.model_name}")
                
            if config.device:
                st.write(f"**–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** {config.device}")

            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            st.success("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            # Debug —Å–µ–∫—Ü–∏—è –¥–ª—è development
            if st.session_state.get('debug_mode', False):
                with st.expander("üîß Debug –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"):
                    st.json(config_dict)
                    
            st.markdown('</div>', unsafe_allow_html=True)

    def _render_system_monitoring(self) -> None:
        """Enhanced —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        with self._error_boundary("–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"):
            metrics = self._get_system_metrics()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    "RAM", 
                    f"{metrics.ram_percent:.1f}%",
                    help=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {metrics.timestamp.strftime('%H:%M:%S')}"
                )
                
            with col2:
                st.metric("CPU", f"{metrics.cpu_percent:.1f}%")
                
            with col3:
                if metrics.gpu_percent is not None:
                    st.metric("GPU", f"{metrics.gpu_percent:.1f}%")
                else:
                    st.metric("GPU", "N/A")
                    
            with col4:
                st.metric("–î–∏—Å–∫", f"{metrics.disk_percent:.1f}%")

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            warnings = self._check_system_resources()
            if warnings:
                st.markdown(f"""
                <div class="warning-box">
                    {"<br>".join(warnings)}
                </div>
                """, unsafe_allow_html=True)

    def render_header(self) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        st.markdown(CUSTOM_CSS, unsafe_allow_html=True)
        st.markdown("""
        <div class="main-header">
            <h1>ü§ñ –ê–∏–¥–∞ - AI Code Assistant</h1>
            <p>Production-Ready</p>
        </div>
        """, unsafe_allow_html=True)

    def render_sidebar(self) -> None:
        """Enhanced –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å comprehensive monitoring"""
        with st.sidebar:
            st.header("üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

            # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
            status_config = {
                ModelStatus.IDLE.value: ("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏", "status-ready"),
                ModelStatus.LOADING.value: ("–ó–∞–≥—Ä—É–∑–∫–∞...", "status-loading"),
                ModelStatus.LOADED.value: ("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "status-ready"),
                ModelStatus.ERROR.value: (f"–û—à–∏–±–∫–∞: {st.session_state.loading_error or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}", "status-error")
            }

            status_text, status_class = status_config[st.session_state.loading_status]

            st.markdown(f"""
            <div class="metric-card">
                <span class="status-indicator {status_class}"></span>
                <strong>–°—Ç–∞—Ç—É—Å:</strong> {status_text}
            </div>
            """, unsafe_allow_html=True)

            # Progress bar –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            if st.session_state.loading_status == ModelStatus.LOADING.value:
                st.markdown(f"""
                <div class="progress-bar">
                    <div class="progress-fill" style="width: {st.session_state.loading_progress}%"></div>
                </div>
                <div style="text-align: center; font-size: 0.8rem;">
                    {st.session_state.loading_progress}%
                </div>
                """, unsafe_allow_html=True)

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not st.session_state.user_name:
                name = st.text_input("üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
                if name:
                    st.session_state.user_name = name
                    if st.session_state.assistant:
                        st.session_state.assistant.user_name = name
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {name}")
                    st.rerun()
            else:
                st.success(f"üëã –ü—Ä–∏–≤–µ—Ç, {st.session_state.user_name}!")

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—å—é
            if st.session_state.loading_status != ModelStatus.LOADING.value:
                if not st.session_state.model_loaded:
                    if st.button("üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary"):
                        self._start_model_loading()
                else:
                    st.success("‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            if st.session_state.resource_warning:
                st.markdown(f"""
                <div class="warning-box">
                    {st.session_state.resource_warning}
                </div>
                """, unsafe_allow_html=True)

            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
            st.subheader("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤")
            self._render_system_monitoring()

            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
            self._render_model_configuration()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
            self._render_session_statistics()

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π
            self._render_session_controls()

    def _render_session_statistics(self) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        if st.session_state.conversation_history:
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏")
            
            total_tasks = len(st.session_state.conversation_history)
            st.metric("–í—Å–µ–≥–æ –∑–∞–¥–∞—á", total_tasks)

            # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            task_types = {}
            for interaction in st.session_state.conversation_history:
                task_type = interaction.get('task_type', 'unknown')
                task_types[task_type] = task_types.get(task_type, 0) + 1

            for task_type, count in task_types.items():
                display_name = task_type.replace('_', ' ').title()
                st.metric(display_name, count)

            # –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
            session_duration = datetime.now() - st.session_state.session_start
            st.metric("–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏", f"{int(session_duration.total_seconds() / 60)} –º–∏–Ω")

    def _render_session_controls(self) -> None:
        """–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π"""
        if st.session_state.conversation_history:
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", type="secondary"):
                st.session_state.conversation_history = []
                st.session_state.chat_messages = []
                if st.session_state.assistant:
                    st.session_state.assistant.conversation_history = []
                logger.info("–ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω–∞")
                st.rerun()

        # Debug —Ä–µ–∂–∏–º toggle
        st.session_state.debug_mode = st.checkbox("üîß Debug —Ä–µ–∂–∏–º", value=st.session_state.get('debug_mode', False))

    def render_main_interface(self) -> None:
        """–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        if not st.session_state.model_loaded:
            st.markdown("""
            <div class="warning-box">
                <h3>‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</h3>
                <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.</p>
                <p><strong>–°–æ–≤–µ—Ç:</strong> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏.</p>
            </div>
            """, unsafe_allow_html=True)
            return

        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
            "‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞",
            "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", 
            "üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞",
            "üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞",
            "üß† –°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º",
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        ])

        with tab1:
            self._render_code_generation()
        with tab2:
            self._render_code_analysis()
        with tab3:
            self._render_code_fixing()
        with tab4:
            self._render_code_explanation()
        with tab5:
            self._render_free_mode()
        with tab6:
            self._render_monitoring()
        with tab7:
            self._render_runtime_settings()

    def _render_code_generation(self) -> None:
        """Enhanced –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"""
        st.markdown('<div class="task-section">', unsafe_allow_html=True)
        st.subheader("‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞")
        st.write("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∏ –ê–∏–¥–∞ —Å–æ–∑–¥–∞—Å—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, production-ready –∫–æ–¥")

        col1, col2 = st.columns([3, 1])

        with col1:
            task = st.text_area(
                "üìù –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–∑–¥–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π –∏ comprehensive error handling",
                height=120,
                help="–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            )

        with col2:
            languages = [
                "python", "javascript", "typescript", "java", "c++", "c", "c#",
                "go", "rust", "php", "ruby", "swift", "kotlin", "scala",
                "html", "css", "sql", "bash", "r", "matlab", "lua"
            ]
            language = st.selectbox("üîß –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:", languages)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            include_tests = st.checkbox("üß™ –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç—ã", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–¥–∞")
            include_docs = st.checkbox("üìö –í–∫–ª—é—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é", help="–î–æ–±–∞–≤–∏—Ç—å docstrings –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")

        if st.button("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", type="primary", key="gen_code"):
            if task.strip():
                with self._error_boundary("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"):
                    with st.spinner("ü§ñ –ê–∏–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥..."):
                        start_time = time.time()
                        
                        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –æ–ø—Ü–∏—è–º–∏
                        enhanced_task = task
                        if include_tests:
                            enhanced_task += "\n\nüß™ –í–ê–ñ–ù–û: –¢–∞–∫–∂–µ –≤–∫–ª—é—á–∏ comprehensive unit —Ç–µ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
                        if include_docs:
                            enhanced_task += "\n\nüìö –í–ê–ñ–ù–û: –î–æ–±–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, docstrings –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–±—ä—è—Å–Ω—è—é—â–∏–µ –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã."
                        
                        result = st.session_state.assistant.generate_code(enhanced_task, language)
                        duration = (time.time() - start_time) * 1000
                        
                        self._save_interaction(
                            task, result, TaskType.CODE_GENERATION.value, duration
                        )

                        st.markdown("### üíª –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                        st.code(result, language=language.lower())

                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        col_info1, col_info2 = st.columns(2)
                        with col_info1:
                            st.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {duration:.0f}–º—Å")
                        with col_info2:
                            lines_count = len(result.split('\n'))
                            st.info(f"üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {lines_count}")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
                        if include_tests or include_docs:
                            options_applied = []
                            if include_tests:
                                options_applied.append("üß™ –¢–µ—Å—Ç—ã")
                            if include_docs:
                                options_applied.append("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
                            st.success(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–ø—Ü–∏–∏: {', '.join(options_applied)}")

                        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        file_extension = self._get_file_extension(language)
                        st.download_button(
                            "üì• –°–∫–∞—á–∞—Ç—å –∫–æ–¥",
                            result,
                            file_name=f"generated_code.{file_extension}",
                            mime="text/plain"
                        )
            else:
                st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É")

        st.markdown('</div>', unsafe_allow_html=True)

    def _render_code_analysis(self) -> None:
        """Enhanced –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
        st.markdown('<div class="task-section">', unsafe_allow_html=True)
        st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
        st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

        col1, col2 = st.columns([3, 1])

        with col1:
            code_input_method = st.radio(
                "–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∫–æ–¥–∞:",
                ["üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ", "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"],
                horizontal=True
            )

            if code_input_method == "üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ":
                code = st.text_area(
                    "–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 
                    height=250, 
                    placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å...",
                    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
            else:
                uploaded_file = st.file_uploader(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º:", 
                    type=['py', 'js', 'ts', 'java', 'cpp', 'c', 'cs', 'go', 'rs', 'php', 'rb', 'html', 'css'],
                    help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 200MB"
                )
                code = ""
                if uploaded_file:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                        if uploaded_file.size > 200 * 1024 * 1024:  # 200MB
                            st.error("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 200MB")
                        else:
                            code = uploaded_file.read().decode('utf-8')
                            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name} ({len(code)} —Å–∏–º–≤–æ–ª–æ–≤)")
                            
                            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                            with st.expander("üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"):
                                preview_lines = code.split('\n')[:20]
                                st.code('\n'.join(preview_lines), language='python')
                                if len(code.split('\n')) > 20:
                                    st.info(f"... –∏ –µ—â–µ {len(code.splitlines()) - 20} —Å—Ç—Ä–æ–∫")
                                    
                    except UnicodeDecodeError:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –≤ UTF-8")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

        with col2:
            languages = ["python", "javascript", "typescript", "java", "c++", "c#", "go", "rust", "php", "ruby"]
            language = st.selectbox("üîß –Ø–∑—ã–∫:", languages, key="analyze_lang")
            
            # –û–ø—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
            st.write("**–û–ø—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:**")
            check_security = st.checkbox("üîí –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", value=True)
            check_performance = st.checkbox("‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", value=True)
            check_style = st.checkbox("üé® –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –∫–æ–¥–∞", value=True)
            check_complexity = st.checkbox("üßÆ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", value=True)

        if st.button("üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", key="analyze_code"):
            if code.strip():
                with self._error_boundary("–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"):
                    with st.spinner("ü§ñ –ê–∏–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥..."):
                        start_time = time.time()
                        
                        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á—ë—Ç–æ–º –æ–ø—Ü–∏–π
                        analysis_options = []
                        if check_security:
                            analysis_options.append("üîí –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
                        if check_performance:
                            analysis_options.append("‚ö° –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                        if check_style:
                            analysis_options.append("üé® —Å—Ç–∏–ª—å –∫–æ–¥–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º")
                        if check_complexity:
                            analysis_options.append("üßÆ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
                        if analysis_options:
                            analysis_prompt = f"–í—ã–ø–æ–ª–Ω–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ {language} —Å –æ—Å–æ–±—ã–º —Ñ–æ–∫—É—Å–æ–º –Ω–∞:\n\n{chr(10).join(analysis_options)}\n\n–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n{code}"
                        else:
                            analysis_prompt = f"–í—ã–ø–æ–ª–Ω–∏ –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞ –Ω–∞ —è–∑—ã–∫–µ {language}:\n\n{code}"
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                        result = st.session_state.assistant.analyze_code(analysis_prompt, language)
                        duration = (time.time() - start_time) * 1000

                        self._save_interaction(
                            f"–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ ({language})", result, TaskType.CODE_ANALYSIS.value, duration
                        )

                        st.markdown("### üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
                        st.markdown(result)
                        
                        # –ú–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
                        col_metrics1, col_metrics2, col_metrics3 = st.columns(3)
                        with col_metrics1:
                            st.metric("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞", f"{duration:.0f}–º—Å")
                        with col_metrics2:
                            lines_analyzed = len(code.split('\n'))
                            st.metric("üìè –°—Ç—Ä–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", lines_analyzed)
                        with col_metrics3:
                            chars_analyzed = len(code)
                            st.metric("üìù –°–∏–º–≤–æ–ª–æ–≤", f"{chars_analyzed:,}")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
                        if analysis_options:
                            st.success(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–ø—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {', '.join(analysis_options)}")
            else:
                st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        st.markdown('</div>', unsafe_allow_html=True)

    def _render_code_fixing(self) -> None:
        """Enhanced –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞"""
        st.markdown('<div class="task-section">', unsafe_allow_html=True)
        st.subheader("üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞")
        st.write("–ê–∏–¥–∞ –Ω–∞–π–¥–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç –æ—à–∏–±–∫–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —É–ª—É—á—à–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞")

        col1, col2 = st.columns([3, 1])

        with col1:
            code = st.text_area(
                "–ö–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", 
                height=250, 
                placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ —Å –æ—à–∏–±–∫–∞–º–∏ –∏–ª–∏ —Ç—Ä–µ–±—É—é—â–∏–π —É–ª—É—á—à–µ–Ω–∏—è...",
                help="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –æ—á–µ–≤–∏–¥–Ω–∞"
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            problem_description = st.text_area(
                "üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
                height=80,
                placeholder="–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ –∏–ª–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å..."
            )

        with col2:
            languages = ["python", "javascript", "typescript", "java", "c++", "c#", "go", "rust", "php", "ruby"]
            language = st.selectbox("üîß –Ø–∑—ã–∫:", languages, key="fix_lang")
            
            # –û–ø—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            st.write("**–¢–∏–ø—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:**")
            fix_bugs = st.checkbox("üêõ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥–∏", value=True)
            optimize_performance = st.checkbox("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", value=True)
            improve_readability = st.checkbox("üìñ –£–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å", value=True)
            add_error_handling = st.checkbox("üõ°Ô∏è –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫", value=True)
            modernize_code = st.checkbox("üîÑ –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", value=False)

        if st.button("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", type="primary", key="fix_code"):
            if code.strip():
                with self._error_boundary("–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞"):
                    with st.spinner("ü§ñ –ê–∏–¥–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥..."):
                        start_time = time.time()
                        
                        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á—ë—Ç–æ–º –æ–ø—Ü–∏–π
                        fix_options = []
                        if fix_bugs:
                            fix_options.append("üêõ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–æ–≤ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
                        if optimize_performance:
                            fix_options.append("‚ö° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
                        if improve_readability:
                            fix_options.append("üìñ —É–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
                        if add_error_handling:
                            fix_options.append("üõ°Ô∏è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ comprehensive error handling –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                        if modernize_code:
                            fix_options.append("üîÑ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                        fix_prompt = f"–ò—Å–ø—Ä–∞–≤—å –∏ —É–ª—É—á—à–∏ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–∞ —è–∑—ã–∫–µ {language}"
                        if fix_options:
                            fix_prompt += f" —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞:\n\n{chr(10).join(fix_options)}"

                        if problem_description.strip():
                            fix_prompt += f"\n\n–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{problem_description}"

                        fix_prompt += f"\n\n–ö–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n{code}"
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                        result = st.session_state.assistant.fix_code(fix_prompt, language)
                        duration = (time.time() - start_time) * 1000
                        
                        self._save_interaction(
                            f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ ({language})", result, TaskType.CODE_FIXING.value, duration
                        )

                        st.markdown("### ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:")
                        st.markdown(result)

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                        col_stats1, col_stats2 = st.columns(2)
                        with col_stats1:
                            st.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {duration:.0f}–º—Å")
                        with col_stats2:
                            original_lines = len(code.split('\n'))
                            st.info(f"üìè –ò—Å—Ö–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {original_lines}")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        if fix_options:
                            st.success(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–ø—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {', '.join(fix_options)}")

                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        import re
                        code_blocks = re.findall(r'```[\w]*\n(.*?)\n```', result, re.DOTALL)
                        if code_blocks:
                            file_extension = self._get_file_extension(language)
                            st.download_button(
                                "üì• –°–∫–∞—á–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥",
                                code_blocks[0],
                                file_name=f"fixed_code.{file_extension}",
                                mime="text/plain"
                            )
            else:
                st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

        st.markdown('</div>', unsafe_allow_html=True)

    def _render_code_explanation(self) -> None:
        """Enhanced –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""
        st.markdown('<div class="task-section">', unsafe_allow_html=True)
        st.subheader("üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞")
        st.write("–ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏")

        col1, col2 = st.columns([3, 1])

        with col1:
            code = st.text_area(
                "–ö–æ–¥ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:", 
                height=250, 
                placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å...",
                help="–ß–µ–º —Å–ª–æ–∂–Ω–µ–µ –∫–æ–¥, —Ç–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –±—É–¥–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
            )

        with col2:
            detail_levels = {
                "–ö—Ä–∞—Ç–∫–æ": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏",
                "–ü–æ–¥—Ä–æ–±–Ω–æ": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏",
                "–î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
                "–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏",
                "–° –ø—Ä–∏–º–µ—Ä–∞–º–∏": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
            }
            detail_level = st.selectbox("üìñ –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:", list(detail_levels.keys()))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            include_diagrams = st.checkbox("üìä –í–∫–ª—é—á–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã", help="–î–æ–±–∞–≤–∏—Ç—å ASCII –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            explain_complexity = st.checkbox("üßÆ –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å", help="–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")

        if st.button("üìñ –û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–¥", type="primary", key="explain_code"):
            if code.strip():
                with self._error_boundary("–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞"):
                    with st.spinner("ü§ñ –ê–∏–¥–∞ –æ–±—ä—è—Å–Ω—è–µ—Ç –∫–æ–¥..."):
                        start_time = time.time()
                        
                        # == –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ–ø—Ü–∏–π ==
                        enhanced_request = f"–î–∞–π {detail_levels[detail_level]} —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞"

                        additional_options = []
                        if include_diagrams:
                            additional_options.append("üìä –≤–∫–ª—é—á–∏ ASCII –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ —Å—Ö–µ–º—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏")
                        if explain_complexity:
                            additional_options.append("üßÆ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")

                        if additional_options:
                            enhanced_request += f", –ø—Ä–∏ —ç—Ç–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ {', –∞ —Ç–∞–∫–∂–µ '.join(additional_options)}"

                        enhanced_request += f":\n\n{code}"
                        
                        result = st.session_state.assistant.explain_code(code, enhanced_request)
                        duration = (time.time() - start_time) * 1000
                        
                        self._save_interaction(
                            f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ ({detail_level})", result, TaskType.CODE_EXPLANATION.value, duration
                        )

                        st.markdown("### üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:")
                        st.markdown(result)
                        
                        # –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
                        col_exp1, col_exp2, col_exp3 = st.columns(3)
                        with col_exp1:
                            st.metric("‚è±Ô∏è –í—Ä–µ–º—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è", f"{duration:.0f}–º—Å")
                        with col_exp2:
                            explanation_words = len(result.split())
                            st.metric("üìù –°–ª–æ–≤ –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏", explanation_words)
                        with col_exp3:
                            code_lines = len(code.split('\n'))
                            st.metric("üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞", code_lines)

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
                        applied_options = [f"üìñ {detail_level}"]
                        if include_diagrams:
                            applied_options.append("üìä –î–∏–∞–≥—Ä–∞–º–º—ã")
                        if explain_complexity:
                            applied_options.append("üßÆ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")

                        st.success(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–ø—Ü–∏–∏: {', '.join(applied_options)}")
            else:
                st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è")

        st.markdown('</div>', unsafe_allow_html=True)

    def _render_free_mode(self) -> None:
        """Enhanced —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è"""
        st.markdown('<div class="task-section">', unsafe_allow_html=True)
        st.subheader("üß† –°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º")
        st.write("–û–±—â–∞–π—Ç–µ—Å—å —Å –ê–∏–¥–æ–π –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        with st.expander("üí° –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã"):
            quick_prompts = [
                "–û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
                "–ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤–µ–±-API?",
                "–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?",
                "–†–∞—Å—Å–∫–∞–∂–∏ –æ best practices –¥–ª—è code review",
                "–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è CI/CD?"
            ]
            
            for i, prompt in enumerate(quick_prompts):
                if st.button(f"üí≠ {prompt}", key=f"quick_{i}"):
                    st.session_state.chat_messages.append({"role": "user", "content": prompt})
                    st.rerun()

        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        chat_container = st.container()
        
        with chat_container:
            for i, message in enumerate(st.session_state.chat_messages):
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                    if message["role"] == "assistant" and len(message["content"]) > 100:
                        col1, col2, col3 = st.columns([1, 1, 8])
                        with col1:
                            if st.button("üìã", key=f"copy_{i}", help="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"):
                                st.text_area("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:", message["content"], height=100, key=f"copy_area_{i}")
                        with col2:
                            if st.button("üíæ", key=f"save_{i}", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª"):
                                st.download_button(
                                    "–°–∫–∞—á–∞—Ç—å",
                                    message["content"],
                                    file_name=f"aida_response_{i}.md",
                                    mime="text/markdown",
                                    key=f"download_{i}"
                                )

        # –í–≤–æ–¥ —á–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å... (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ, best practices)"):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.session_state.chat_messages.append({"role": "user", "content": prompt})
            
            with st.chat_message("user"):
                st.markdown(prompt)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            with st.chat_message("assistant"):
                with st.spinner("ü§ñ –ê–∏–¥–∞ –æ–±–¥—É–º—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç..."):
                    try:
                        start_time = time.time()
                        response = st.session_state.assistant.generate_response(prompt, "free_mode")
                        duration = (time.time() - start_time) * 1000
                        
                        st.markdown(response)
                        st.session_state.chat_messages.append({"role": "assistant", "content": response})
                        
                        self._save_interaction(prompt, response, TaskType.FREE_MODE.value, duration)
                        
                        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
                        st.caption(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {duration:.0f}–º—Å")
                        
                    except Exception as e:
                        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
                        st.error(error_msg)
                        st.session_state.chat_messages.append({"role": "assistant", "content": error_msg})

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.session_state.chat_messages and st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
                st.session_state.chat_messages = []
                st.rerun()
                
        with col2:
            if st.session_state.chat_messages and st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞"):
                chat_export = "\n\n".join([
                    f"**{msg['role'].upper()}:** {msg['content']}" 
                    for msg in st.session_state.chat_messages
                ])
                st.download_button(
                    "üíæ –°–∫–∞—á–∞—Ç—å —á–∞—Ç",
                    chat_export,
                    file_name=f"aida_chat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                    mime="text/markdown"
                )
                
        with col3:
            total_messages = len(st.session_state.chat_messages)
            if total_messages > 0:
                st.metric("üí¨ –°–æ–æ–±—â–µ–Ω–∏–π", total_messages)
                
        with col4:
            if st.session_state.chat_messages:
                total_chars = sum(len(msg['content']) for msg in st.session_state.chat_messages)
                st.metric("üìù –°–∏–º–≤–æ–ª–æ–≤", f"{total_chars:,}")

        st.markdown('</div>', unsafe_allow_html=True)

    def _render_monitoring(self) -> None:
        """Enhanced –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        st.subheader("üìä Comprehensive –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

        if not st.session_state.conversation_history:
            st.markdown("""
            <div class="metric-card">
                <h4>üìà –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!</h4>
                <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.</p>
                <p><strong>–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:</strong></p>
                <ul>
                    <li>üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ç–∏–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</li>
                    <li>‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</li> 
                    <li>üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã</li>
                    <li>üéØ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            return

        try:
            # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)

            total_tasks = len(st.session_state.conversation_history)
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
            task_types = {}
            total_duration = 0
            successful_tasks = 0
            
            for interaction in st.session_state.conversation_history:
                task_type = interaction.get('task_type', 'unknown')
                task_types[task_type] = task_types.get(task_type, 0) + 1
                
                if 'duration_ms' in interaction:
                    total_duration += interaction['duration_ms']
                if interaction.get('success', True):
                    successful_tasks += 1

            with col1:
                st.metric("üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á", total_tasks)

            with col2:
                success_rate = (successful_tasks / total_tasks * 100) if total_tasks > 0 else 0
                st.metric("‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{success_rate:.1f}%")

            with col3:
                most_common_task = max(task_types, key=task_types.get) if task_types else "N/A"
                display_task = most_common_task.replace('_', ' ').title()
                st.metric("üéØ –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∑–∞–¥–∞—á–∞", display_task)

            with col4:
                avg_duration = total_duration / total_tasks if total_tasks > 0 else 0
                st.metric("‚è±Ô∏è –°—Ä. –≤—Ä–µ–º—è", f"{avg_duration:.0f}–º—Å")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col5, col6, col7, col8 = st.columns(4)
            
            with col5:
                session_duration = datetime.now() - st.session_state.session_start
                st.metric("üïê –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏", f"{int(session_duration.total_seconds() / 60)} –º–∏–Ω")
                
            with col6:
                tasks_per_hour = total_tasks / (session_duration.total_seconds() / 3600) if session_duration.total_seconds() > 0 else 0
                st.metric("üìà –ó–∞–¥–∞—á/—á–∞—Å", f"{tasks_per_hour:.1f}")
                
            with col7:
                chat_messages = len(st.session_state.chat_messages)
                st.metric("üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ", chat_messages)
                
            with col8:
                if hasattr(st.session_state.assistant, 'get_generation_statistics'):
                    gen_stats = st.session_state.assistant.get_generation_statistics()
                    if gen_stats and 'total_tokens_generated' in gen_stats:
                        st.metric("üî§ –¢–æ–∫–µ–Ω–æ–≤", f"{gen_stats['total_tokens_generated']:,}")
                    else:
                        st.metric("üî§ –¢–æ–∫–µ–Ω–æ–≤", "N/A")
                else:
                    st.metric("üî§ –¢–æ–∫–µ–Ω–æ–≤", "N/A")

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            if task_types:
                col_chart1, col_chart2 = st.columns(2)
                
                with col_chart1:
                    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
                    fig_pie = px.pie(
                        values=list(task_types.values()),
                        names=[name.replace('_', ' ').title() for name in task_types.keys()],
                        title="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á",
                        color_discrete_sequence=px.colors.qualitative.Set3
                    )
                    fig_pie.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig_pie, use_container_width=True)

                with col_chart2:
                    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
                    if any('duration_ms' in interaction for interaction in st.session_state.conversation_history):
                        task_performance = {}
                        for interaction in st.session_state.conversation_history:
                            if 'duration_ms' in interaction:
                                task_type = interaction.get('task_type', 'unknown')
                                if task_type not in task_performance:
                                    task_performance[task_type] = []
                                task_performance[task_type].append(interaction['duration_ms'])
                        
                        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º
                        avg_performance = {
                            task_type.replace('_', ' ').title(): sum(durations) / len(durations)
                            for task_type, durations in task_performance.items()
                        }
                        
                        fig_bar = px.bar(
                            x=list(avg_performance.keys()),
                            y=list(avg_performance.values()),
                            title="‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º—Å)",
                            color=list(avg_performance.values()),
                            color_continuous_scale="viridis"
                        )
                        fig_bar.update_layout(showlegend=False)
                        st.plotly_chart(fig_bar, use_container_width=True)

            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            df_history = pd.DataFrame(st.session_state.conversation_history)
            if not df_history.empty and 'timestamp' in df_history.columns:
                df_history['timestamp'] = pd.to_datetime(df_history['timestamp'])
                df_history['hour'] = df_history['timestamp'].dt.hour
                df_history['minute_bucket'] = (df_history['timestamp'].dt.minute // 10) * 10

                col_time1, col_time2 = st.columns(2)
                
                with col_time1:
                    # –ü–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    hourly_activity = df_history.groupby('hour').size().reset_index(name='count')
                    fig_timeline = px.bar(
                        hourly_activity,
                        x='hour',
                        y='count',
                        title="‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º",
                        color='count',
                        color_continuous_scale="blues"
                    )
                    fig_timeline.update_layout(showlegend=False)
                    st.plotly_chart(fig_timeline, use_container_width=True)
                    
                with col_time2:
                    # –¢—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if 'duration_ms' in df_history.columns:
                        df_history['task_index'] = range(len(df_history))
                        fig_trend = px.line(
                            df_history,
                            x='task_index',
                            y='duration_ms',
                            title="üìà –¢—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                            labels={'task_index': '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏', 'duration_ms': '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º—Å)'}
                        )
                        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
                        fig_trend.add_scatter(
                            x=df_history['task_index'],
                            y=df_history['duration_ms'].rolling(window=3, center=True).mean(),
                            mode='lines',
                            name='–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ',
                            line=dict(color='red', dash='dash')
                        )
                        st.plotly_chart(fig_trend, use_container_width=True)

            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            st.subheader("üöÄ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
            
            if hasattr(st.session_state.assistant, 'get_generation_statistics'):
                gen_stats = st.session_state.assistant.get_generation_statistics()
                if gen_stats and 'error' not in gen_stats:
                    perf_col1, perf_col2, perf_col3, perf_col4 = st.columns(4)

                    with perf_col1:
                        latency = gen_stats.get('average_latency_ms', 0)
                        st.metric("‚è±Ô∏è –°—Ä. –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å", f"{latency:.1f} –º—Å")

                    with perf_col2:
                        throughput = gen_stats.get('average_throughput_tokens_per_second', 0)
                        st.metric("üöÄ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", f"{throughput:.1f} —Ç–æ–∫/—Å")

                    with perf_col3:
                        total_tokens = gen_stats.get('total_tokens_generated', 0)
                        st.metric("üî§ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤", f"{total_tokens:,}")

                    with perf_col4:
                        avg_tokens_per_task = total_tokens / total_tasks if total_tasks > 0 else 0
                        st.metric("üìä –¢–æ–∫–µ–Ω–æ–≤/–∑–∞–¥–∞—á–∞", f"{avg_tokens_per_task:.0f}")

                    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    with st.expander("üî¨ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"):
                        perf_details_col1, perf_details_col2 = st.columns(2)

                        with perf_details_col1:
                            st.write("**–ú–µ—Ç—Ä–∏–∫–∏ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏:**")
                            st.write(f"- –°—Ä–µ–¥–Ω—è—è: {gen_stats.get('average_latency_ms', 0):.2f}–º—Å")
                            st.write(f"- P95: {gen_stats.get('p95_latency_ms', 0):.2f}–º—Å")
                            st.write(f"- P99: {gen_stats.get('p99_latency_ms', 0):.2f}–º—Å")

                        with perf_details_col2:
                            st.write("**–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:**")
                            st.write(f"- –°—Ä–µ–¥–Ω—è—è: {gen_stats.get('average_throughput_tokens_per_second', 0):.2f} —Ç–æ–∫/—Å")
                            st.write(f"- –ü–∏–∫–æ–≤–∞—è: {gen_stats.get('peak_throughput_tokens_per_second', 0):.2f} —Ç–æ–∫/—Å")
                            st.write(f"- –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {gen_stats.get('total_tokens_generated', 0):,} —Ç–æ–∫–µ–Ω–æ–≤")
                else:
                    st.info("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á
            st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

            if st.session_state.conversation_history:
                # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                filter_col1, filter_col2, filter_col3 = st.columns(3)

                with filter_col1:
                    task_filter = st.selectbox(
                        "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É:",
                        ["–í—Å–µ"] + list(task_types.keys()),
                        format_func=lambda x: x.replace('_', ' ').title() if x != "–í—Å–µ" else "–í—Å–µ"
                    )

                with filter_col2:
                    show_errors_only = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏")

                with filter_col3:
                    max_records = st.number_input("–ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π:", min_value=5, max_value=100, value=20)

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                filtered_history = st.session_state.conversation_history.copy()

                if task_filter != "–í—Å–µ":
                    filtered_history = [h for h in filtered_history if h.get('task_type') == task_filter]

                if show_errors_only:
                    filtered_history = [h for h in filtered_history if not h.get('success', True)]

                filtered_history = filtered_history[-max_records:]

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                if filtered_history:
                    history_df = pd.DataFrame([
                        {
                            '–í—Ä–µ–º—è': pd.to_datetime(h['timestamp']).strftime('%H:%M:%S'),
                            '–¢–∏–ø –∑–∞–¥–∞—á–∏': h.get('task_type', 'unknown').replace('_', ' ').title(),
                            '–ó–∞–¥–∞—á–∞': h.get('task', '')[:50] + '...' if len(h.get('task', '')) > 50 else h.get('task', ''),
                            '–°—Ç–∞—Ç—É—Å': '‚úÖ' if h.get('success', True) else '‚ùå',
                            '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º—Å)': f"{h.get('duration_ms', 0):.0f}" if 'duration_ms' in h else 'N/A'
                        }
                        for h in filtered_history
                    ])

                    st.dataframe(
                        history_df,
                        use_container_width=True,
                        hide_index=True
                    )

                    # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
                    if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV"):
                        csv_data = pd.DataFrame(st.session_state.conversation_history).to_csv(index=False)
                        st.download_button(
                            "üíæ –°–∫–∞—á–∞—Ç—å CSV",
                            csv_data,
                            file_name=f"aida_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv"
                        )
                else:
                    st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")

            # Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if st.session_state.get('debug_mode', False):
                with st.expander("üîß Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                    st.text_area("Traceback:", traceback.format_exc(), height=200)



    def _render_runtime_settings(self) -> None:
        """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        st.markdown('<div class="task-section">', unsafe_allow_html=True)
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        st.write("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏. –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–∞–º.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not st.session_state.get('assistant'):
            st.warning("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            st.markdown('</div>', unsafe_allow_html=True)
            return

        try:
            # –í—ã–±–æ—Ä —Å–µ–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            config_sections = ["generation", "performance", "monitoring"]
            section_to_edit = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                config_sections
            )

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if hasattr(st.session_state.assistant, section_to_edit):
                current_config = getattr(st.session_state.assistant, section_to_edit)

                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
                    st.json(current_config)

                # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ JSON —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                st.write("**–í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:**")
                update_json_str = st.text_area(
                    "JSON —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏:",
                    height=150,
                    placeholder='{\n  "temperature": 0.8,\n  "max_new_tokens": 2000\n}',
                    help="–£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å."
                )

                if st.button("üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key=f"apply_{section_to_edit}"):
                    if update_json_str:
                        try:
                            updates = json.loads(update_json_str)
                            if not isinstance(updates, dict):
                                st.error("‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å JSON-–æ–±—ä–µ–∫—Ç–æ–º (—Å–ª–æ–≤–∞—Ä–µ–º).")
                            else:
                                success = st.session_state.assistant.update_config_runtime(section_to_edit, updates)
                                if success:
                                    st.success(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{section_to_edit}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                                    st.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
                                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π rerun –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                                    # st.rerun()
                                else:
                                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

                        except json.JSONDecodeError:
                            st.error("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON.")
                        except Exception as e:
                            st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
                    else:
                        st.warning("‚ö†Ô∏è –ü–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–æ.")

            else:
                st.error(f"–°–µ–∫—Ü–∏—è '{section_to_edit}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")

        except Exception as e:
            st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

        st.markdown('</div>', unsafe_allow_html=True)


    def _save_interaction(self, task: str, result: str, task_type: str, duration_ms: Optional[float] = None) -> None:
        """Thread-safe —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å comprehensive –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        try:
            interaction = InteractionRecord(
                timestamp=datetime.now().isoformat(),
                task=task[:500],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
                result=result[:1000],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
                task_type=task_type,
                duration_ms=duration_ms,
                success=True
            )

            st.session_state.conversation_history.append(asdict(interaction))

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            if st.session_state.assistant and hasattr(st.session_state.assistant, 'save_interaction'):
                try:
                    st.session_state.assistant.save_interaction(
                        task=task[:200],
                        prompt=task[:300],
                        result=result[:400],
                        task_type=task_type
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ: {e}")

            logger.info(f"–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {task_type}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_ms}–º—Å")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º

    def _get_file_extension(self, language: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ —è–∑—ã–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        extensions = {
            'python': 'py',
            'javascript': 'js',
            'typescript': 'ts',
            'java': 'java',
            'c++': 'cpp',
            'c': 'c',
            'c#': 'cs',
            'go': 'go',
            'rust': 'rs',
            'php': 'php',
            'ruby': 'rb',
            'swift': 'swift',
            'kotlin': 'kt',
            'scala': 'scala',
            'html': 'html',
            'css': 'css',
            'sql': 'sql',
            'bash': 'sh',
            'r': 'r',
            'matlab': 'm',
            'lua': 'lua'
        }
        return extensions.get(language.lower(), 'txt')

    def run(self) -> None:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å comprehensive error handling

        –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
        - Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        - Comprehensive monitoring –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        - Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_time = time.time()

            # Throttling –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫
            if (st.session_state.loading_status == ModelStatus.LOADING.value and
                current_time - st.session_state.last_rerun_time > 0.5):
                st.session_state.last_rerun_time = current_time

            # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            with self._error_boundary("—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"):
                self.render_header()

            with self._error_boundary("—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"):
                self.render_sidebar()

            with self._error_boundary("—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"):
                self.render_main_interface()

            # Production-ready —Ñ—É—Ç–µ—Ä —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            self._render_footer()

        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            st.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

            # Emergency —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
            st.markdown("""
            <div class="error-section">
                <h3>üõ†Ô∏è –†–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</h3>
                <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</p>
                <ul>
                    <li>–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</li>
                    <li>–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞</li>
                    <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

            # Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            if st.session_state.get('debug_mode', False):
                st.text_area("Critical Error Traceback:", traceback.format_exc(), height=300)

    def _render_footer(self) -> None:
        """Production-ready —Ñ—É—Ç–µ—Ä —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        st.markdown("---")

        footer_col1, footer_col2, footer_col3 = st.columns(3)

        with footer_col1:
            st.markdown(
                f"ü§ñ **AIDA v2.0** | Session: {st.session_state.session_start.strftime('%H:%M:%S')}"
            )

        with footer_col2:
            if st.session_state.model_loaded:
                model_status = "üü¢ –ú–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞"
            elif st.session_state.loading_status == ModelStatus.LOADING.value:
                model_status = "üü° –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"
            else:
                model_status = "üî¥ –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            st.markdown(f"**–°—Ç–∞—Ç—É—Å:** {model_status}")

        with footer_col3:
            metrics = self._get_system_metrics()
            st.markdown(f"**–†–µ—Å—É—Ä—Å—ã:** RAM {metrics.ram_percent:.0f}% | CPU {metrics.cpu_percent:.0f}%")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        with st.expander("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
            tech_col1, tech_col2 = st.columns(2)

            with tech_col1:
                st.write("**–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**")
                st.write(f"- Python: {sys.version.split()[0]}")
                st.write(f"- Streamlit: {st.__version__}")
                st.write(f"- GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if gpu_available else '‚ùå'}")
                st.write(f"- –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: {psutil.cpu_count()}")

            with tech_col2:
                st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:**")
                st.write(f"- –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(st.session_state.conversation_history)}")
                st.write(f"- –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {len(st.session_state.chat_messages)}")
                uptime = datetime.now() - st.session_state.session_start
                st.write(f"- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(uptime.total_seconds() / 60)}–º {int(uptime.total_seconds() % 60)}—Å")


# ===== –¢–û–ß–ö–ê –í–•–û–î–ê =====
def main() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å comprehensive error handling –∏ graceful degradation

    Production-ready –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    - Graceful fallback –ø—Ä–∏ –æ—Ç–∫–∞–∑–∞—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("–ó–∞–ø—É—Å–∫ Enhanced AIDA Web Interface")
        app = EnhancedAidaWebInterface()

        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        app.run()

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

        # Emergency UI –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        st.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        st.markdown("""
        <div class="error-section">
            <h3>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</h3>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</p>
            <ul>
                <li>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏</li>
                <li>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</li>
                <li>–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π</li>
            </ul>
            <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong></p>
            <ul>
                <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
                <li>–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Ñ–∞–π–ª–∞ fixed_aida_code3.py</li>
                <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        with st.expander("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
            st.text_area("Error Details:", str(e), height=150)
            st.text_area("Full Traceback:", traceback.format_exc(), height=300)


if __name__ == "__main__": 
    main()
